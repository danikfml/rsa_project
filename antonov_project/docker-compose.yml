version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
    volumes:
      - kafka_data:/bitnami/kafka
    restart: unless-stopped

  api:
    build: ./api
    container_name: api
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=sqlite+aiosqlite:////app/db/api.db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./api/db:/app/db
      - ./videos:/app/videos
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure

  inference:
    build: ./inference
    container_name: inference
    ports:
      - "8002:8000"
    restart: on-failure

  orchestrator:
    build: ./orchestrator
    container_name: orchestrator
    environment:
      - ORCH_DB_URL=sqlite+aiosqlite:////app/db/orchestrator.db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - HEARTBEAT_TIMEOUT=10
    volumes:
      - ./orchestrator/db:/app/db
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure

  runner:
    build: ./runner
    container_name: runner
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INFERENCE_URL=http://inference:8000/infer
      - HEARTBEAT_INTERVAL=5
    volumes:
      - ./videos:/app/videos
    depends_on:
      kafka:
        condition: service_healthy
      inference:
        condition: service_started
    restart: on-failure

volumes:
  kafka_data:
  zookeeper_data:
  videos:
